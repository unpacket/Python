1. Easy read condition.

condition = True

if condition:
  x = 1
else:
  x = 0

print(x)

x = 1 if condition else 0 

2. Easy Read number

num1 = 10_000_000_000 #num1 = 1000000000
num2 = 1_0000_000  # num2 = 10000000

total = num1 + num2

print(total) #101000000000
print(f'{total:,}') # 10,100,000,000

3. open / close file

f = open('test.txt', 'r')

file_contents = f.read()

f.close()

words = file_contents.split(' ')
word_count = len(words)
print(word_count)

---- 
with open('test.txt', 'r') as if:
  file_contents = f.read()
  
words = file_contents.split(' ')
word_count = len(words)
print(word_count)


4. list looping

names = ['Corey', 'Chris', 'Dave', 'Travis']

index = 0
for name in names:
  print(index, name)
  index += 1
 
for index, name in enumerate(names, start=1):
  print(index, name)

names = ['Peter Parker', 'Clark Kent', 'Wade Wilson', 'Bruce Wayne']
heroes = ['Spiderman', 'Superman', 'Deadpool', 'Batman']
universe ['Marvel', 'DC', 'Marvel', 'DC']

for index, name in enumerate(names):
  hero = heroes[index]
  print(f'{name} is actually {hero}')
  
for name, hero, universe in zip(names, heroes, universes):
  print(f'{name} is actually {hero} from {universe}')

for value in zip(names, heroes, universes):
  print(value)

# Normal
items = (1, 2)

# Unpacking
a, b = (1, 2)
a, _ = (1, 2)
a, b, c = (1, 2) # ValueError: not enough values to unpack (expected 3, got 2)

a, b, c = (1, 2, 3, 4, 5)  # ValueError: too many values to unpack (expected 3)

print(a)
print(b)

a, b, *c = (1, 2, 3, 4, 5)  
print(a)
print(b)
print(c)

1,
2,
[3, 4, 5]

a, b, *_ = (1, 2, 3, 4, 5)  
print(a)
print(b)
#print(c)

1
2


a, b, *c, d = (1, 2, 3, 4, 5)
print(a)
print(b)
print(c)
print(d)
1
2
[3, 4]
5

a, b, *_, d = (1, 2, 3, 4, 5)
print(a)
print(b)
print(c)
print(d)
1
2
5


5. 

class Person():
  pass

person = Person()

person.fist = "Corey"
person.last = "Schafer"

print(person.first)
print(person.last)

----
class Person():
  pass

person = Person()

first_key = 'first'
first_val = 'Corey'

#person.first_key = first_val
#setattr(person, 'first', 'Corey')
#print(person.first)

setattr(person, first_key, first_val)
first = getattr(person, first_key)
print(first)

---

class Person():
  pass

person = Person()

person_info = {'first': 'Corey', 'last': 'Schafer'}

for key, value in person_info.items():
  setattr(person, key, value)
  
print(person.first)
print(person.last)

for key in person_info.keys():
  print(getattr(person, key))

6. inputing 

from getpass import getpass

username = input('Username: ')
password = getpass('Password: ') #password = input('Password: ')

print('Logging In...')


$ python -m smtpd -c DebuggingServer -n localhost:1025
$ python -m password

$ python
>>> import smtpd
>>> help(smtpd)

>>> from datetime import datetime
>>> dir(datetime)
['__add__', '__class__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', 'astimezone', 'combine', 'ctime', 'date', 'day', 'dst', 'fromordinal', 'fromtimestamp', 'hour', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'microsecond', 'min', 'minute', 'month', 'now', 'replace', 'resolution', 'second', 'strftime', 'strptime', 'time', 'timetuple', 'timetz', 'today', 'toordinal', 'tzinfo', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset', 'utctimetuple', 'weekday', 'year']
>>> datetime.today
<built-in method today of type object at 0x0000000053661360>
>>> datetime.today()
datetime.datetime(2021, 4, 9, 9, 38, 56, 270000)
